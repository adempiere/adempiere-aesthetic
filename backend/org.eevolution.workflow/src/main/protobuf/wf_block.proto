/**
 * Copyright (C) 2003-2021, e-Evolution Consultants S.A. , http://www.e-evolution.com
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * Email: victor.perez@e-evolution.com, http://www.e-evolution.com , http://github.com/e-Evolution
 * Created by victor.perez@e-evolution.com , www.e-evolution.com
 */


syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.eevolution.context.workflow.infrastructure.service.grpc";

package workflow;


import "application_dictionary_data_type.proto";
import "google/protobuf/wrappers.proto";

/*
* WfBlock Proto Message for Workflow Block domain model  
* Workflow Transaction Execution Block
* 
*/
message WfBlock
{
		// Description -> Description : Optional short description of the record
		String                        				description  = 1;
		// AD_Client_ID -> Client : Client/Tenant for this installation.
		TableDirect                   				client_id  = 2;
		// AD_Workflow_ID -> Workflow : Workflow or combination of tasks
		TableDirect                   				workflow_id  = 3;
		// Updated -> Updated : Date this record was updated
		DateTime                      				updated  = 4;
		// CreatedBy -> Created By : User who created this records
		Table                         				created_by  = 5;
		// IsActive -> Active : The record is active in the system
		YesNo                         				is_active  = 6;
		// Name -> Name : Alphanumeric identifier of the entity
		String                        				name  = 7;
		// Created -> Created : Date this record was created
		DateTime                      				created  = 8;
		// AD_Org_ID -> Organization : Organizational entity within client
		TableDirect                   				org_id  = 9;
		// AD_WF_Block_ID -> Workflow Block : Workflow Transaction Execution Block
		ID                            				wf_block_id  = 10;
		// UpdatedBy -> Updated By : User who updated this records
		Table                         				updated_by  = 11;
		// UUID -> Immutable Universally Unique Identifier : Immutable Universally Unique Identifier
		String                        				uuid  = 12;
}


// Proto Message Request for Description 
message WfBlockByDescriptionRequest{
	String                         description = 1;
}

// Proto Message Request for AD_Workflow_ID 
message WfBlockByWorkflowIdRequest{
	TableDirect                    workflow_id = 1;
}

// Proto Message Request for Name 
message WfBlockByNameRequest{
	String                         name = 1;
}

// Proto Message Request for AD_WF_Block_ID 
message WfBlockByWfBlockIdRequest{
	ID                             wf_block_id = 1;
}

// Proto Message Request for All Request 
message WfBlockAllRequest 
{
}

// Proto Message Request for All By Client Id Request    
message WfBlockAllByClientIdRequest{
  TableDirect tenant_id = 1;
} 
    
// Proto Message Save Request for WfBlock
message WfBlockSaveRequest{
  WfBlock wf_block = 1 ;
}
    
// Proto Message Response for WfBlock
message WfBlockResponse
{
   WfBlock wf_block = 1;
}
 
// Proto Message Response for WfBlock Stream   
message WfBlockStreamResponse{
  repeated WfBlock wf_block = 1;
} 
    
// Proto Service for WfBlock Domain Model
service WfBlockService {

    rpc GetWfBlockByDescription(WfBlockByDescriptionRequest) returns (stream WfBlockStreamResponse) {}

    rpc GetWfBlockByWorkflowId(WfBlockByWorkflowIdRequest) returns (stream WfBlockStreamResponse) {}

    rpc GetWfBlockByName(WfBlockByNameRequest) returns (WfBlockResponse) {}

    rpc GetWfBlockByWfBlockId(WfBlockByWfBlockIdRequest) returns (WfBlockResponse) {}

    rpc GetWfBlockAll(WfBlockAllRequest) returns (stream WfBlockStreamResponse) {}
    
    rpc GetWfBlockAllByClientId(WfBlockAllByClientIdRequest) returns (stream WfBlockStreamResponse) {}
    
    rpc save(WfBlockSaveRequest) returns (WfBlockResponse) {}
    
}